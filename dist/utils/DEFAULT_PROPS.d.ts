import { DimensionValue, FlexStyle } from "react-native";
import { Theme } from "../theme";
export type BSDefaultProps = FlexStyle & {
    p?: DimensionValue;
    m?: DimensionValue;
    px?: DimensionValue;
    py?: DimensionValue;
    pt?: DimensionValue;
    pb?: DimensionValue;
    pl?: DimensionValue;
    pr?: DimensionValue;
    mx?: DimensionValue;
    my?: DimensionValue;
    mt?: DimensionValue;
    mb?: DimensionValue;
    ml?: DimensionValue;
    mr?: DimensionValue;
    bg?: keyof Theme['colors'] | `#${string}` | `rgb${string}`;
    rounded?: DimensionValue;
    roundedTop?: DimensionValue;
    roundedBottom?: DimensionValue;
    roundedLeft?: DimensionValue;
    roundedRight?: DimensionValue;
    roundedX?: DimensionValue;
    roundedY?: DimensionValue;
    borderWidth?: number;
    borderColor?: keyof Theme["colors"] | `#${string}` | `rgb${string}`;
    borderTopWidth?: number;
    borderBottomWidth?: number;
    borderLeftWidth?: number;
    borderRightWidth?: number;
    borderTopColor?: keyof Theme["colors"] | `#${string}` | `rgb${string}`;
    borderBottomColor?: keyof Theme["colors"] | `#${string}` | `rgb${string}`;
    borderLeftColor?: keyof Theme["colors"] | `#${string}` | `rgb${string}`;
    borderRightColor?: keyof Theme["colors"] | `#${string}` | `rgb${string}`;
    borderXWidth?: number;
    borderYWidth?: number;
    borderXColor?: keyof Theme["colors"] | `#${string}` | `rgb${string}`;
    borderYColor?: keyof Theme["colors"] | `#${string}` | `rgb${string}`;
    shadow?: keyof Theme['shadows'];
    flexDir?: "row" | "column" | "row-reverse" | "column-reverse";
    opacity?: number;
    pointerEvents?: "box-none" | "none" | "box-only" | "auto";
    w?: DimensionValue;
    h?: DimensionValue;
    maxW?: DimensionValue;
    maxH?: DimensionValue;
    minW?: DimensionValue;
    minH?: DimensionValue;
};
export declare const DEFAULT_PROPS: (props: BSDefaultProps, theme: Theme) => any[];
